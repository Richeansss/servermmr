package org.example.servermmr.udp;

import org.springframework.stereotype.Component;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class GameServer implements Runnable {
    private static final int PORT = 9876;

    // –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ò–≥—Ä–æ–∫ -> IP, –ø–æ—Ä—Ç)
    private final ConcurrentHashMap<String, PlayerInfo> activePlayers = new ConcurrentHashMap<>();

    public GameServer() {
        new Thread(this).start();
    }

    @Override
    public void run() {
        try (DatagramSocket socket = new DatagramSocket(PORT)) {
            byte[] buffer = new byte[1024];
            System.out.println("‚úÖ –ò–ì–†–û–í–û–ô UDP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + PORT);

            while (true) {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);

                String receivedData = new String(packet.getData(), 0, packet.getLength()).trim();
                System.out.println("üì© –ü–æ–ª—É—á–µ–Ω–æ: " + receivedData);

                handleMessage(receivedData, packet.getAddress(), packet.getPort(), socket);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(String message, InetAddress address, int port, DatagramSocket socket) {
        String[] parts = message.split(" ");
        String command = parts[0];

        switch (command) {
            case "JOIN": // –í—Ö–æ–¥ –≤ –∏–≥—Ä—É
                if (parts.length == 2) {
                    String playerName = parts[1];
                    activePlayers.put(playerName, new PlayerInfo(address, port, 0, 0));

                    System.out.println("üë§ –ò–≥—Ä–æ–∫ " + playerName + " –≤–æ—à–µ–ª –≤ –∏–≥—Ä—É.");
                    sendResponse("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + playerName + "!", address, port, socket);
                    broadcast("üì¢ –ò–≥—Ä–æ–∫ " + playerName + " –≤–æ—à–µ–ª –≤ –∏–≥—Ä—É.", socket);
                }
                break;

            case "LEAVE": // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
                if (parts.length == 2) {
                    String playerName = parts[1];
                    activePlayers.remove(playerName);

                    System.out.println("üö™ –ò–≥—Ä–æ–∫ " + playerName + " –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.");
                    sendResponse("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.", address, port, socket);
                    broadcast("üì¢ –ò–≥—Ä–æ–∫ " + playerName + " –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.", socket);
                }
                break;

            case "COUNT": // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                int playerCount = activePlayers.size();
                sendResponse("üéÆ –°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ: " + playerCount + " –∏–≥—Ä–æ–∫–æ–≤.", address, port, socket);
                break;

            case "MOVE": // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
                if (parts.length == 4) {
                    String playerName = parts[1];
                    int x = Integer.parseInt(parts[2]);
                    int y = Integer.parseInt(parts[3]);

                    PlayerInfo player = activePlayers.get(playerName);
                    if (player != null) {
                        player.setX(x);
                        player.setY(y);
                        broadcast("üöÄ " + playerName + " –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª—Å—è –≤ [" + x + "," + y + "]", socket);
                    }
                }
                break;

            default:
                sendResponse("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", address, port, socket);
        }
    }

    private void sendResponse(String message, InetAddress address, int port, DatagramSocket socket) {
        try {
            byte[] responseData = message.getBytes();
            DatagramPacket responsePacket = new DatagramPacket(responseData, responseData.length, address, port);
            socket.send(responsePacket);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void broadcast(String message, DatagramSocket socket) {
        activePlayers.forEach((name, player) -> sendResponse(message, player.getAddress(), player.getPort(), socket));
    }

    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    private static class PlayerInfo {
        private final InetAddress address;
        private final int port;
        private int x, y;

        public PlayerInfo(InetAddress address, int port, int x, int y) {
            this.address = address;
            this.port = port;
            this.x = x;
            this.y = y;
        }

        public InetAddress getAddress() { return address; }
        public int getPort() { return port; }
        public void setX(int x) { this.x = x; }
        public void setY(int y) { this.y = y; }
    }
}
